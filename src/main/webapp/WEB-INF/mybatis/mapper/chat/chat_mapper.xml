<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="chat_mapper">

<!--    insert to chatroom_m 테이블-->
    <insert id="insert_chatroom_m" parameterType="ChatDto">
        insert into chatroom_m (room_id, master, status)
        values (room_id_seq.NEXTVAL, #{sender}, 0)
    </insert>

<!--    insert to chatroom_d 테이블-->
    <insert id="insert_chatroom_d" parameterType="ChatDto">
        insert into chatroom_d (room_id, member)
        values (#{roomId}, #{sender})
    </insert>

<!--    insert to chat 테이블-->
    <insert id="insert_chat" parameterType="ChatDto">
        insert all
            into chat (chat_id, room_id, sender, content, type, time_stamp)
                values (chat_id_seq.NEXTVAL, #{roomId}, #{sender}, #{content}, #{type}, TO_DATE(#{timeStamp}, 'YYYY-MM-DD HH24:MI:SS'))
            into chat_r (room_id, chat_id, member)
                values (#{roomId}, chat_id_seq.CURRVAL, #{sender})
        select * from dual
    </insert>

<!--    insert to chat_r 테이블-->
    <insert id="insert_chat_r" parameterType="ChatDto">
        insert into chat_r (room_id, chat_id, member)
        values (#{roomId}, #{chatId}, #{sender})
    </insert>

<!--    내가 속해있는 채팅방 정보와 마지막 채팅내용 가져오기-->
    <select id="select_all_my_chatroom" resultType="ChatRoomDto">
        SELECT m.room_id, m.master, m.status, NVL(c.content, '새로운 채팅방') AS content
        FROM chatroom_m m
                 LEFT JOIN (
            SELECT room_id, content
            FROM chat
            WHERE (room_id, chat_id) IN (
                SELECT room_id, MAX(chat_id)
                FROM chat
                WHERE type = 'text'
                GROUP BY room_id)
        ) c ON m.room_id = c.room_id
        ORDER BY m.room_id
    </select>

<!--    chatroom_m 테이블에서 room_id 로 채팅방정보 불러오기 -->
    <select id="select_chatroom_by_id" resultType="ChatRoomDto" parameterType="Integer">
        select *
        from chatroom_m
        where room_id = #{value}
    </select>

<!--    chat 테이블에서 room_id 로 모든 채팅정보 불러오기-->
    <select id="select_all_chat_by_roomid" resultType="ChatDto" parameterType="Integer">
        select c.chat_id, c.room_id, c.sender, c.content, c.type, TO_CHAR(c.time_stamp, 'YYYY-MM-DD HH24:MI:SS') as time_stamp,
               COUNT(cd.member)-(select COUNT(member) from chat_r where chat_id = c.chat_id) as un_read
        from chat c, chatroom_d cd
        where c.room_id = #{value}
        GROUP BY c.chat_id, c.room_id, c.sender, c.content, c.type, time_stamp
        ORDER BY c.room_id, c.chat_id
    </select>

<!--    마지막 확인 채팅부터 최신 채팅까지 읽음처리 (채팅방 입장시)-->
    <insert id="insert_all_chat_r_read_up_to_recent_by_user_id" parameterType="String">
        insert into chat_r
        select room_id, chat_id, #{value} as member
        from chat
        where chat_id not in (select chat_id
                         from chat_r
                         where member = #{value})
    </insert>

</mapper>
