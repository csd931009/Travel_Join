<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="review_mapper">

	<!-- 글 작성 -->
	<insert id="insert_review" parameterType="ReviewDto">
		insert into review_bbs (review_id, user_id, plan_id, title, content, stars)
		values ( review_id_seq.NEXTVAL, #{userId} , #{planId}, #{title}, #{content},  #{stars})
	</insert>
	
	<!-- 작성한 글번호 반환 -->
	<select id="select_review_id" resultType="ReviewDto">
		select review_id
		from review_bbs
		where user_id = #{userId}
		and plan_id = #{planId}
		and delete_at = 'N'
	</select>
	
	<!-- 글 임시저장 -->
	<insert id="insert_review_temp" parameterType="ReviewDto">
		insert into review_temp (user_id, plan_id, stars, title, content)
		values ( #{userId}, #{planId}, #{stars}, #{title}, #{content} )
	</insert>
	
	<!-- 임시저장 불러오기 -->
	<select id="select_review_temp" resultType="ReviewDto">
		select user_id, plan_id, stars, title, content
		from review_temp
		where user_id = #{userId}
	</select>
	
	<!-- 글 임시저장 변경 -->
	<update id="update_review_temp">
		update review_temp
		set title = #{title}, content = #{content}, stars = #{stars}, plan_id = #{planId}
		where user_id = #{userId}
	</update>
	
	<!-- 임시저장 삭제 -->
	<delete id="delete_review_temp">
		delete from review_temp
		where user_id = #{userId}
	</delete>
	
	<!-- 글목록 불러오기 (+검색기능) -->
	<select id="select_review_list" resultType="ReviewDto" parameterType="hashMap">
		select review_id, user_id, title, SUBSTR(create_date,1,10) create_date,
				views, like_count, comment_count
		from review_bbs
 		where 1=1
		<if test="searchCondition == 'title'">
			and title like '%'||#{keyword}||'%'
		</if>
		<if test="searchCondition == 'content'">
			and content like '%'||#{keyword}||'%'
		</if>
		<if test="searchCondition == 'ticon'">
			and (title like '%'||#{keyword}||'%') or (content like '%'||#{keyword}||'%')
		</if>
		<if test="searchCondition == 'user'">
			and user_id like '%'||#{keyword}||'%'
		</if>
		and delete_at = 'N'
		order by review_id desc
	</select>
	
	<!-- 글상세 불러오기 -->
	<select id="select_review_view" resultType="ReviewDto">
		select review_id, plan_id, user_id, title, content, create_date, views, like_count, stars, comment_count, update_date
		from review_bbs
 		where review_id = #{reviewId}
 		and delete_at = 'N'
	</select>
	
	<!-- 조회수 증가 -->
	<update id="update_review_views_increase">
		update review_bbs
		set views =  views + 1
		where review_id = #{reviewId}
		and user_id != #{userId}
	</update>
	
	<!-- 추천여부 확인 -->
	<select id="select_review_like" resultType="LikeDto">
	    select *
	    from review_like
	    where review_id = #{reviewId}
	    and user_id = #{userId}
	</select>
	
	<!-- 추천하기 -->
	<insert id="insert_review_like" parameterType="LikeDto">
	    insert into review_like
	    values ( #{reviewId}, #{userId} )
	</insert>
	
	<!-- 추천수 증가 -->
	<update id="update_review_like_count">
		update review_bbs
		set like_count = (select count(*) from review_like where review_id = #{reviewId})
		where review_id = #{reviewId}
	</update>
	
	<!-- 추천수 조회 -->
	<select id="select_review_like_count" resultType="ReviewDto">
		select count(*) like_count from review_like
		where review_id = #{reviewId}
	</select>
	
	<!-- 이미지파일명 저장 -->
	<insert id="insert_review_image" parameterType="ReviewImgDto">
		insert into review_image (review_id, file_name)
		values ( #{reviewId}, #{fileName} )
	</insert>
	
	<!-- 이미지파일명 조회 -->
	<select id="select_review_image" resultType="ReviewImgDto">
		select review_id, file_name
		from review_image
 		where file_name = #{fileName}
	</select>
	
	<!-- 이미지파일명 전부 삭제 -->
	<delete id="delete_review_image">
		delete from review_image
		where review_id = #{reviewId}
	</delete>
	
	<!-- 글 삭제 -->
	<update id="update_review_delete_at">
		update review_bbs
		set delete_at = 'Y', delete_date = SYSDATE
		where review_id = #{reviewId}
	</update>
	
	<!-- 글 수정 -->
	<update id="update_review_modify">
		update review_bbs
		set title = #{title}, content = #{content}, stars = #{stars}, plan_id = #{planId}, update_date = SYSDATE
		where review_id = #{reviewId}
	</update>
	
	<!-- 댓글 작성 -->
	<insert id="insert_comment" parameterType="CommentDto">
		insert into review_comment (comment_id, comment_lv, review_id, user_id, content, parent_comment_id)
		values ( comment_id_seq.NEXTVAL, #{commentLv}, #{reviewId}, #{userId}, #{content}, #{parentCommentId})
	</insert>
	
	<!-- 댓글 삭제 -->
	<update id="update_comment_delete_at">
		update review_comment
		set delete_at = 'Y', delete_date = SYSDATE
		where comment_id = #{commentId}
	</update>
	
	<!-- 댓글 수정 -->
	<update id="update_comment_modify">
		update review_comment
		set content = #{content}, update_date = SYSDATE
		where comment_id = #{commentId}
	</update>
	
	<!-- 댓글수 수정 -->
	<update id="update_review_comment_count">
		update review_bbs
		set comment_count = (select count(*) from review_comment
							 where review_id = #{reviewId}
							 and delete_at = 'N')
		where review_id = #{reviewId}
	</update>
	
	<!-- 댓글수 불러오기 -->
<!-- 	<select id="select_review_comment_count" resultType="ReviewDto">
		select count(*) comment_count from review_comment
		where review_id = #{reviewId}
		and delete_at = 'N'
	</select> -->
	
	<!-- 댓글목록 불러오기 -->
	<select id="select_comment_list" resultType="CommentDto">
		select LEVEL COMMENTLEVEL, comment_lv, comment_id, parent_comment_id, 
			   user_id, create_date, update_date, delete_at, content	
		from review_comment
 		where review_id = #{reviewId}
 		and <!-- 삭제되지 않은 하위계층을 가진 댓글이거나 -->
 			(comment_id IN (select parent_comment_id from review_comment where delete_at = 'N')
 			<!-- 삭제되지 않은 하위계층을 가진 댓글의 부모댓글이거나 -->
 			or comment_id IN (select parent_comment_id from review_comment
 							  where comment_id IN (select parent_comment_id from review_comment where delete_at = 'N' ))
			<!-- 삭제되지 않은 댓글 -->  
        	or delete_at = 'N')
		<!-- 계층구조 시작조건 : parent_comment_id가 0인 댓글부터 시작하여 계층형성 -->
		start with parent_comment_id = 0
		<!-- 계층구조 연결조건 : 이전 댓글의 id가 현재 댓글의 parent_comment_id와 일치하는 경우 계층형성 -->
		connect by prior comment_id = parent_comment_id
		<!-- 같은 부모를 가지는 댓글들 중에서 댓글id로 정렬 -->
		order siblings by comment_id
	</select>
	
	<!-- 댓글목록 불러오기 -->
	<select id="select_comment_list2" resultType="CommentDto">
		select LEVEL COMMENTLEVEL, comment_lv, comment_id, parent_comment_id, 
			   user_id, create_date, update_date, delete_at, content	
		from review_comment
 		where review_id = #{reviewId}
 		<!-- 삭제된 댓글은 조회하지 않음. 단, 삭제되지 않은 자식계층이 남아있으면 '삭제된 댓글입니다'라고 표시함 -->
 		and (comment_id in (
                        	select parent_comment_id from review_comment
                        	where review_id = #{reviewId} and delete_at = 'N'
                        	)
             or comment_lv = 3 <!-- 3계층의 댓글은 항상 조회 --> 
             or delete_at = 'N')
		<!-- 계층구조 시작조건 : parent_comment_id가 0인 댓글부터 시작하여 계층형성 -->
		start with parent_comment_id = 0
		<!-- 계층구조 연결조건 : 이전 댓글의 id가 현재 댓글의 parent_comment_id와 일치하는 경우 계층형성 -->
		connect by prior comment_id = parent_comment_id
		<!-- 같은 부모를 가지는 댓글들 중에서 댓글id로 정렬 -->
		order siblings by comment_id
	</select>
	
</mapper>