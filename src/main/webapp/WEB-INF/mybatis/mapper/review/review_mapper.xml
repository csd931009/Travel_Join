<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="review_mapper">

	<!-- 글 작성 -->
	<insert id="insert_review" parameterType="ReviewDto">
		INSERT INTO review_bbs (review_id, user_id, plan_id, title, content, stars)
		VALUES ( review_id_seq.NEXTVAL, #{userId} , #{planId}, #{title}, #{content},  #{stars})
	</insert>
	
	<!-- 작성한 글번호 반환 -->
	<select id="select_review_id" resultType="ReviewDto">
		SELECT review_id
		FROM review_bbs
		WHERE user_id = #{userId}
		AND plan_id = #{planId}
		AND delete_at = 'N'
	</select>
	
	<!-- 글 임시저장 -->
	<insert id="insert_review_temp" parameterType="ReviewDto">
		INSERT INTO review_temp (user_id, plan_id, stars, title, content)
		VALUES ( #{userId}, #{planId}, #{stars}, #{title}, #{content} )
	</insert>
	
	<!-- 임시저장 불러오기 -->
	<select id="select_review_temp" resultType="ReviewDto">
		SELECT user_id, plan_id, stars, title, content
		FROM review_temp
		WHERE user_id = #{userId}
	</select>
	
	<!-- 글 임시저장 변경 -->
	<update id="update_review_temp">
		UPDATE review_temp
		SET title = #{title}, content = #{content}, stars = #{stars}, plan_id = #{planId}
		WHERE user_id = #{userId}
	</update>
	
	<!-- 임시저장 삭제 -->
	<delete id="delete_review_temp">
		DELETE FROM review_temp
		WHERE user_id = #{userId}
	</delete>
	
	<!-- 글목록 불러오기 (+검색기능) -->
	<select id="select_review_list" resultType="ReviewDto" parameterType="hashMap">
		SELECT rb.review_id, rb.user_id, rb.title, SUBSTR(rb.create_date,1,10) create_date,
				rb.views, rb.like_count, rb.comment_count, rb.stars, us.nick
		FROM review_bbs rb
		JOIN users us ON rb.user_id = us.user_id
 		WHERE 1=1
		<if test="searchCondition == 'title'">
			AND rb.title LIKE '%'||#{keyword}||'%'
		</if>
		<if test="searchCondition == 'content'">
			AND rb.content LIKE '%'||#{keyword}||'%'
		</if>
		<if test="searchCondition == 'ticon'">
			AND (rb.title LIKE '%'||#{keyword}||'%') or (rb.content LIKE '%'||#{keyword}||'%')
		</if>
		<if test="searchCondition == 'user'">
			AND rb.user_id LIKE '%'||#{keyword}||'%'
		</if>
		AND rb.delete_at = 'N'
		ORDER BY rb.review_id DESC
	</select>
	
	<!-- 글상세 불러오기 -->
	<select id="select_review_view" resultType="ReviewDto">
		SELECT rb.review_id, rb.plan_id, rb.user_id, rb.title, rb.content, rb.create_date, 
			   rb.views, rb.like_count, rb.stars, rb.comment_count, rb.update_date, us.nick, 
			   jb.title||'('||TO_CHAR(jb.startday, 'YY-MM-DD')||'~'||TO_CHAR(jb.endday, 'YY-MM-DD')||')' AS planInfo
		FROM review_bbs rb
		JOIN join_board jb ON rb.plan_id = jb.no
		JOIN users us ON rb.user_id = us.user_id
 		WHERE review_id = #{reviewId}
 		AND delete_at = 'N'
	</select>
	
	<!-- 조회수 증가 -->
	<update id="update_review_views_increase">
		UPDATE review_bbs
		SET views =  views + 1
		WHERE review_id = #{reviewId}
		AND user_id != #{userId}
	</update>
	
	<!-- 추천여부 확인 -->
	<select id="select_review_like" resultType="LikeDto">
	    SELECT *
	    FROM review_like
	    WHERE review_id = #{reviewId}
	    AND user_id = #{userId}
	</select>
	
	<!-- 추천하기 -->
	<insert id="insert_review_like" parameterType="LikeDto">
	    INSERT INTO review_like
	    VALUES ( #{reviewId}, #{userId} )
	</insert>
	
	<!-- 추천수 증가 -->
	<update id="update_review_like_count">
		UPDATE review_bbs
		SET like_count = (SELECT count(*) FROM review_like WHERE review_id = #{reviewId})
		WHERE review_id = #{reviewId}
	</update>
	
	<!-- 추천수 조회 -->
	<select id="select_review_like_count" resultType="ReviewDto">
		SELECT count(*) like_count FROM review_like
		WHERE review_id = #{reviewId}
	</select>
	
	<!-- 이미지파일명 저장 -->
	<insert id="insert_review_image" parameterType="ReviewImgDto">
		INSERT INTO review_image (review_id, file_name)
		VALUES ( #{reviewId}, #{fileName} )
	</insert>
	
	<!-- 이미지파일명 조회 -->
	<select id="select_review_image" resultType="ReviewImgDto">
		SELECT review_id, file_name
		FROM review_image
 		WHERE file_name = #{fileName}
	</select>
	
	<!-- 이미지파일명 전부 삭제 -->
	<delete id="delete_review_image">
		DELETE FROM review_image
		WHERE review_id = #{reviewId}
	</delete>
	
	<!-- 글 삭제 -->
	<update id="update_review_delete_at">
		UPDATE review_bbs
		SET delete_at = 'Y', delete_date = SYSDATE
		WHERE review_id = #{reviewId}
	</update>
	
	<!-- 글 수정 -->
	<update id="update_review_modify">
		UPDATE review_bbs
		SET title = #{title}, content = #{content}, stars = #{stars}, plan_id = #{planId}, update_date = SYSDATE
		WHERE review_id = #{reviewId}
	</update>
	
	<!-- 댓글 작성 -->
	<insert id="insert_comment" parameterType="CommentDto">
		INSERT INTO review_comment (comment_id, comment_lv, review_id, user_id, content, parent_comment_id)
		VALUES ( comment_id_seq.NEXTVAL, #{commentLv}, #{reviewId}, #{userId}, #{content}, #{parentCommentId})
	</insert>
	
	<!-- 댓글 삭제 -->
	<update id="update_comment_delete_at">
		UPDATE review_comment
		SET delete_at = 'Y', delete_date = SYSDATE
		WHERE comment_id = #{commentId}
	</update>
	
	<!-- 댓글 수정 -->
	<update id="update_comment_modify">
		UPDATE review_comment
		SET content = #{content}, update_date = SYSDATE
		WHERE comment_id = #{commentId}
	</update>
	
	<!-- 댓글수 수정 -->
	<update id="update_review_comment_count">
		UPDATE review_bbs
		SET comment_count = (SELECT count(*) FROM review_comment
							 WHERE review_id = #{reviewId}
							 AND delete_at = 'N')
		WHERE review_id = #{reviewId}
	</update>
	
	<!-- 댓글목록 불러오기 -->
	<select id="select_comment_list" resultType="CommentDto">
		SELECT LEVEL COMMENTLEVEL, rc.comment_lv, rc.comment_id, rc.parent_comment_id, 
			   rc.user_id, rc.create_date, rc.update_date, rc.delete_at, rc.content, us.nick
		FROM review_comment rc
		JOIN users us ON rc.user_id = us.user_id
 		WHERE rc.review_id = #{reviewId}
 		AND <!-- 삭제되지 않은 하위계층을 가진 댓글이거나 -->
 			(rc.comment_id IN (SELECT parent_comment_id FROM review_comment WHERE delete_at = 'N')
 			<!-- 삭제되지 않은 하위계층을 가진 댓글의 부모댓글이거나 -->
 			OR rc.comment_id IN (SELECT parent_comment_id FROM review_comment
 							  WHERE comment_id IN (SELECT parent_comment_id FROM review_comment WHERE delete_at = 'N' ))
			<!-- 삭제되지 않은 댓글 -->  
        	OR rc.delete_at = 'N')
		<!-- 계층구조 시작조건 : parent_comment_id가 0인 댓글부터 시작하여 계층형성 -->
		START WITH rc.parent_comment_id = 0
		<!-- 계층구조 연결조건 : 이전 댓글의 id가 현재 댓글의 parent_comment_id와 일치하는 경우 계층형성 -->
		CONNECT BY PRIOR rc.comment_id = rc.parent_comment_id
		<!-- 같은 부모를 가지는 댓글들 중에서 댓글id로 정렬 -->
		ORDER SIBLINGS BY rc.comment_id
	</select>
	
	<!-- 여행 목록 불러오기 (리뷰 작성 가능한 것만) -->
	<select id="select_review_join_list" resultType="JoinDto">
		SELECT no, title, TO_CHAR(endDay, 'YY-MM-DD') endDay, TO_CHAR(startDay, 'YY-MM-DD') startDay
		FROM join_board
 		WHERE SYSDATE > endDay <!-- 여행종료일 기준 -->
 		AND no IN (SELECT no FROM party WHERE user_id = #{userId}) <!-- 로그인한 아이디로 참여한 여행 -->
 		AND no NOT IN (SELECT plan_id no FROM review_bbs
 					   WHERE user_id = #{userId} AND delete_at = 'N' ) <!-- 리뷰 작성한 것 제외 -->
		ORDER BY endDay
	</select>
	
	<!-- 여행 찾기 -->
	<select id="select_review_join" resultType="JoinDto">
		SELECT no, title, TO_CHAR(endDay, 'YY-MM-DD') endDay, TO_CHAR(startDay, 'YY-MM-DD') startDay
		FROM join_board
		WHERE no = #{planId}
	</select>
	
</mapper>